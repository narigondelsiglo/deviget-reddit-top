{"version":3,"sources":["app/api.js","app/postsSlice.js","app/store.js","app/localStorage.js","components/PostListItem.jsx","components/PostList.jsx","components/PostPanelItem.jsx","components/AppLayout.jsx","App.js","serviceWorker.js","index.js"],"names":["parseJsonToPosts","data","id","author","thumbnail","image","preview","images","source","url","replace","title","time","created_utc","comments","num_comments","unread","top","children","map","fetchTop50","a","console","log","fetch","response","json","postsAdapter","createEntityAdapter","createAsyncThunk","api","condition","foo","thunkApi","getState","requestId","posts","currentRequestId","loading","slice","createSlice","name","initialState","selectedPost","getInitialState","reducers","selectPost","state","action","post","entities","payload","dismissPost","removeOne","dismissAllPosts","removeAll","extraReducers","fulfilled","Array","isArray","upsertMany","pending","meta","actions","selectors","getSelectors","reducer","store","configureStore","postsReducer","preloadedState","serializedState","localStorage","getItem","JSON","parse","err","loadState","subscribe","throttle","stringify","setItem","saveState","useStyles","makeStyles","root","minWidth","padding","cursor","fontSize","PostListItem","classes","dispatch","useDispatch","Card","data-testid","className","onClick","CardContent","Box","display","p","flexGrow","textAlign","moment","unix","fromNow","src","alt","CardActions","Button","variant","size","startIcon","e","stopPropagation","Divider","PostList","postsList","LinearProgress","Object","values","length","TransitionGroup","Slide","in","key","timeout","direction","unmountOnExit","maxWidth","handleDownloadImage","saveAs","split","pop","trim","flex","theme","appBar","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","width","marginLeft","easeOut","enteringScreen","menuButton","marginRight","spacing","drawer","flexShrink","drawerPaper","drawerHeader","alignItems","mixins","toolbar","justifyContent","content","contentShift","bottomBar","position","bottom","height","AppLayout","useSelector","selectEntities","postsCount","selectTotal","React","useState","open","setOpen","flexDirection","bgcolor","CssBaseline","AppBar","clsx","Toolbar","IconButton","color","aria-label","edge","Typography","noWrap","Drawer","paper","anchor","paragraph","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9c045f3d.chunk.js","sourcesContent":["// initially use the examples\nimport top from \"./top.json\";\n\nconst parseJsonToPosts = ({ data }) => ({\n  id: data.id,\n  author: data.author,\n  thumbnail: data.thumbnail !== \"default\" ? data.thumbnail : null,\n  image: data.preview?.images[0]?.source?.url?.replace(/&amp;/g, \"&\"),\n  title: data.title,\n  time: data.created_utc,\n  comments: data.num_comments,\n  unread: true,\n});\n\nexport default top.data?.children?.map(parseJsonToPosts) || [];\n\nexport async function fetchTop50() {\n  console.log(\"fetching data\");\n  const response = await fetch(\"https://www.reddit.com/top.json?limit=50\");\n  const json = await response.json();\n  console.log(\"data fetched\", json);\n  return json.data?.children?.map(parseJsonToPosts);\n}\n","/* eslint-disable no-param-reassign */\n// Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n// doesn't actually mutate the state because it uses the Immer library,\n// which detects changes to a \"draft state\" and produces a brand new\n// immutable state based off those changes\n\nimport { createSlice, createAsyncThunk, createEntityAdapter } from \"@reduxjs/toolkit\";\nimport * as api from \"./api\";\n\nconst postsAdapter = createEntityAdapter();\n\nexport const fetchTop50 = createAsyncThunk(\n  \"posts/fetchTop50\",\n  async () => {\n    console.log(\"dispatched fetchTop50 action\");\n    const response = await api.fetchTop50();\n    return response;\n  },\n  {\n    condition: (foo, thunkApi) => {\n      const { getState, requestId } = thunkApi;\n      const { currentRequestId, loading } = getState().posts;\n      return !(loading && requestId === currentRequestId);\n    },\n  }\n);\n\nexport const slice = createSlice({\n  name: \"users\",\n  initialState: {\n    selectedPost: null,\n    ...postsAdapter.getInitialState({ loading: false, currentRequestId: null }),\n  },\n  reducers: {\n    selectPost: (state, action) => {\n      const post = state.entities[action.payload];\n      post.unread = false;\n      state.selectedPost = post;\n    },\n    dismissPost: postsAdapter.removeOne,\n    dismissAllPosts: postsAdapter.removeAll,\n  },\n  extraReducers: {\n    [fetchTop50.fulfilled]: (state, action) => {\n      console.log(\"fetch fullfilled\", action.payload);\n      if (Array.isArray(action.payload)) postsAdapter.upsertMany(state, action.payload);\n      state.loading = false;\n      state.currentRequestId = null;\n    },\n    [fetchTop50.pending]: (state, action) => {\n      if (!state.loading) {\n        state.loading = true;\n        state.currentRequestId = action.meta.requestId;\n      }\n    },\n  },\n});\nexport const actions = { ...slice.actions, fetchTop50 };\nexport const selectors = postsAdapter.getSelectors((state) => state.posts);\n\nconst { reducer } = slice;\nexport default reducer;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport throttle from \"lodash/throttle\";\nimport postsReducer from \"./postsSlice\";\nimport { loadState, saveState } from \"./localStorage\";\n\nconst store = configureStore({\n  reducer: {\n    posts: postsReducer,\n  },\n  preloadedState: loadState(),\n});\n\nstore.subscribe(\n  throttle(() => {\n    saveState({\n      posts: store.getState().posts,\n    });\n  }, 1000)\n);\n\nexport default store;\n","export const loadState = () => {\n  try {\n    const serializedState = localStorage.getItem(\"state\");\n    if (serializedState === null) {\n      return undefined;\n    }\n    return JSON.parse(serializedState);\n  } catch (err) {\n    return undefined;\n  }\n};\n\nexport const saveState = (state) => {\n  try {\n    const serializedState = JSON.stringify(state);\n    localStorage.setItem(\"state\", serializedState);\n  } catch {\n    // ignore write errors\n  }\n};\n","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport Box from \"@material-ui/core/Box\";\nimport Divider from \"@material-ui/core/Divider\";\nimport Button from \"@material-ui/core/Button\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport MailOutlinedIcon from \"@material-ui/icons/MailOutlined\";\nimport DraftsOutlinedIcon from \"@material-ui/icons/DraftsOutlined\";\n\nimport moment from \"moment\";\nimport { actions } from \"../app/postsSlice\";\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    minWidth: 275,\n    padding: 2,\n    cursor: \"pointer\",\n  },\n  title: {\n    fontSize: 14,\n  },\n}));\n\nexport default function PostListItem({ post }) {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n\n  const { id, author, title, thumbnail, time, comments, unread } = post;\n\n  return (\n    <>\n      <Card\n        data-testid={`PostListItem-${id}`}\n        className={classes.root}\n        onClick={() => dispatch(actions.selectPost(id))}\n      >\n        <CardContent className={classes.root}>\n          <Box display=\"flex\">\n            <Box p={1}>{unread ? <MailOutlinedIcon /> : <DraftsOutlinedIcon />}</Box>\n            <Box p={1} flexGrow={1} textAlign=\"left\">\n              <b>{author}</b>\n            </Box>\n            <Box p={1}>{moment.unix(time).fromNow()}</Box>\n          </Box>\n          <Box display=\"flex\">\n            <Box>{thumbnail && <img src={thumbnail} alt=\"\" />}</Box>\n            <Box p={1} flexGrow={1} textAlign=\"left\">\n              {title}\n            </Box>\n          </Box>\n        </CardContent>\n        <CardActions display=\"flex\">\n          <Button\n            variant=\"contained\"\n            size=\"small\"\n            startIcon={<DeleteIcon />}\n            onClick={(e) => dispatch(actions.dismissPost(id)) && e.stopPropagation()}\n          >\n            Dismiss post\n          </Button>\n          <Box p={1} flexGrow={1} textAlign=\"right\">\n            {comments} comments\n          </Box>\n        </CardActions>\n      </Card>\n      <Divider />\n    </>\n  );\n}\n","import React from \"react\";\n\nimport Box from \"@material-ui/core/Box\";\nimport { TransitionGroup } from \"react-transition-group\";\nimport Slide from \"@material-ui/core/Slide\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport PostListItem from \"./PostListItem\";\n\nexport default function PostList({ loading, postsList }) {\n  switch (true) {\n    case loading:\n      return <LinearProgress />;\n    case postsList && Object.values(postsList).length > 0:\n      return (\n        <TransitionGroup>\n          {Object.values(postsList).map((post) => {\n            return (\n              <Slide in key={post.id} timeout={800} direction=\"right\" unmountOnExit>\n                <Box>\n                  <PostListItem post={post} />\n                </Box>\n              </Slide>\n            );\n          })}\n        </TransitionGroup>\n      );\n    default:\n      return <Box>No posts loaded</Box>;\n  }\n}\n","import React from \"react\";\nimport saveAs from \"file-saver\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport Box from \"@material-ui/core/Box\";\nimport Button from \"@material-ui/core/Button\";\nimport SaveIcon from \"@material-ui/icons/Save\";\n\nimport moment from \"moment\";\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    minWidth: 275,\n    padding: 2,\n  },\n  title: {\n    fontSize: 14,\n  },\n  image: {\n    maxWidth: 400,\n  },\n}));\n\nexport default function PostListItem({ post }) {\n  const classes = useStyles();\n\n  const { id, author, title, time, comments, thumbnail, image } = post;\n\n  const handleDownloadImage = async () => {\n    // Use external proxy to avoid CORS security restriction\n    return saveAs(\n      `https://cors-anywhere.herokuapp.com/${image}`,\n      `${id}.${image.split(/[#?]/)[0].split(\".\").pop().trim()}`\n    );\n  };\n\n  return (\n    <Card className={classes.root}>\n      <CardContent className={classes.root}>\n        <Box display=\"flex\">\n          <Box p={1} flexGrow={1} textAlign=\"left\">\n            <b>{author}</b>\n          </Box>\n          <Box p={1}>{moment.unix(time).fromNow()}</Box>\n        </Box>\n\n        <Box>{(image || thumbnail) && <img className={classes.image} src={image || thumbnail} alt={title} />}</Box>\n        <Box p={1} textAlign=\"left\">\n          {title}\n        </Box>\n      </CardContent>\n      <CardActions display=\"flex\">\n        {image && (\n          <Button variant=\"contained\" size=\"small\" flex=\"none\" startIcon={<SaveIcon />} onClick={handleDownloadImage}>\n            Download full resolution image\n          </Button>\n        )}\n        <Box p={1} flexGrow={1} textAlign=\"right\">\n          {comments} comments\n        </Box>\n      </CardActions>\n    </Card>\n  );\n}\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport clsx from \"clsx\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport Box from \"@material-ui/core/Box\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport { Button } from \"@material-ui/core\";\nimport { actions, selectors } from \"../app/postsSlice\";\n\nimport PostList from \"./PostList\";\nimport PostPanelItem from \"./PostPanelItem\";\n\nconst drawerWidth = 400;\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n  },\n  appBar: {\n    transition: theme.transitions.create([\"margin\", \"width\"], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n  },\n  appBarShift: {\n    width: `calc(100% - ${drawerWidth}px)`,\n    marginLeft: drawerWidth,\n    transition: theme.transitions.create([\"margin\", \"width\"], {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n  },\n  drawerPaper: {\n    width: drawerWidth,\n  },\n  drawerHeader: {\n    display: \"flex\",\n    alignItems: \"center\",\n    padding: theme.spacing(0, 1),\n    // necessary for content to be below app bar\n    ...theme.mixins.toolbar,\n    justifyContent: \"flex-end\",\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n    transition: theme.transitions.create(\"margin\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    marginLeft: -drawerWidth,\n  },\n  contentShift: {\n    transition: theme.transitions.create(\"margin\", {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n    marginLeft: 0,\n  },\n  bottomBar: {\n    position: \"sticky\",\n    bottom: 0,\n    height: 35,\n    width: \"100%\",\n  },\n}));\n\nexport default function AppLayout() {\n  const classes = useStyles();\n  const loading = useSelector((state) => state.posts.loading);\n  const selectedPost = useSelector((state) => state.posts.selectedPost);\n  const postsList = useSelector(selectors.selectEntities);\n  const postsCount = useSelector(selectors.selectTotal);\n  const dispatch = useDispatch();\n\n  const [open, setOpen] = React.useState(true);\n\n  if (!loading && postsCount === 0) {\n    dispatch(actions.fetchTop50());\n  }\n\n  const handleDrawerToggle = () => {\n    setOpen(!open);\n  };\n\n  const drawer = (\n    <Box display=\"flex\" height=\"100%\" flexDirection=\"column\">\n      <PostList loading={loading} postsList={postsList} flex=\"none\" />\n      <Box flexGrow={1} />\n      <Box className={classes.bottomBar} textAlign=\"center\" bgcolor=\"grey.200\">\n        <Button variant=\"text\" startIcon={<DeleteIcon />} onClick={() => dispatch(actions.dismissAllPosts())}>\n          Dismiss All\n        </Button>\n      </Box>\n    </Box>\n  );\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar\n        position=\"fixed\"\n        className={clsx(classes.appBar, {\n          [classes.appBarShift]: open,\n        })}\n      >\n        <Toolbar>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            edge=\"start\"\n            onClick={handleDrawerToggle}\n            className={classes.menuButton}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" noWrap>\n            Reddit Top Posts\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <Drawer\n        className={classes.drawer}\n        classes={{\n          paper: classes.drawerPaper,\n        }}\n        anchor=\"left\"\n        variant=\"persistent\"\n        open={open}\n      >\n        {drawer}\n      </Drawer>\n      <main\n        className={clsx(classes.content, {\n          [classes.contentShift]: open,\n        })}\n        data-testid=\"PostPanelItem\"\n      >\n        <div className={classes.drawerHeader} />\n        {selectedPost ? (\n          <PostPanelItem post={selectedPost} />\n        ) : (\n          <>\n            <Typography paragraph>Hello! This is an application that fetches the top 50 posts from Reddit</Typography>\n            <Typography paragraph>\n              {loading\n                ? \"The posts are loading, please wait...\"\n                : \"Select a post from the left panel to expand the contents\"}\n            </Typography>\n          </>\n        )}\n      </main>\n    </div>\n  );\n}\n","import React from \"react\";\nimport AppLayout from \"./components/AppLayout\";\n\nimport \"./App.css\";\n\nfunction App() {\n  return <AppLayout />;\n}\n\nexport default App;\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (response.status === 404 || (contentType != null && contentType.indexOf(\"javascript\") === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\"No internet connection found. App is running in offline mode.\");\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./app/store\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}